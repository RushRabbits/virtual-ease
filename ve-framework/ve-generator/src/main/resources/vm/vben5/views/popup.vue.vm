<script setup lang="ts">
import { computed, ref } from 'vue';

import { useVben${PopupComponent} } from '@vben/common-ui';
import { $t } from '@vben/locales';
import { cloneDeep } from '@vben/utils';

import { useVbenForm } from '#/adapter/form';
import { ${businessName}Add, ${businessName}Info, ${businessName}Update } from '#/api/${moduleName}/${businessName}';

import { ${popupComponent}Schema } from './data';

const emit = defineEmits<{ reload: [] }>();

const isUpdate = ref(false);
const title = computed(() => {
  return isUpdate.value ? $t('pages.common.edit') : $t('pages.common.add');
});

const [BasicForm, formApi] = useVbenForm({
  commonConfig: {
    // 默认占满两列
    formItemClass: 'col-span-2',
    // 默认label宽度 px
    labelWidth: 80,
    // 通用配置项 会影响到所有表单项
    componentProps: {
      class: 'w-full',
    }
  },
  schema: ${popupComponent}Schema(),
  showDefaultActions: false,
  wrapperClass: 'grid-cols-2',
});

const [Basic${PopupComponent}, ${popupComponent}Api] = useVben${PopupComponent}({
  fullscreenButton: false,
  onCancel: handleCancel,
  onConfirm: handleConfirm,
  onOpenChange: async (isOpen) => {
    if (!isOpen) {
      return null;
    }
    ${popupComponent}Api.${popupComponent}Loading(true);

    const { id } = ${popupComponent}Api.getData() as { id?: number | string };
    isUpdate.value = !!id;

    if (isUpdate.value && id) {
      const record = await ${businessName}Info(id);
      await formApi.setValues(record);
    }

    ${popupComponent}Api.${popupComponent}Loading(false);
  },
});

async function handleConfirm() {
  try {
    ${popupComponent}Api.${popupComponent}Loading(true);
    const { valid } = await formApi.validate();
    if (!valid) {
      return;
    }
    // getValues获取为一个readonly的对象 需要修改必须先深拷贝一次
    const data = cloneDeep(await formApi.getValues());
    await (isUpdate.value ? ${businessName}Update(data) : ${businessName}Add(data));
    emit('reload');
    await handleCancel();
  } catch (error) {
    console.error(error);
  } finally {
    ${popupComponent}Api.${popupComponent}Loading(false);
  }
}

async function handleCancel() {
  ${popupComponent}Api.close();
  await formApi.resetForm();
}
</script>

<template>
  <Basic${PopupComponent} :close-on-click-modal="false" :title="title" class="w-[550px]">
    <BasicForm />
  </Basic${PopupComponent}>
</template>
